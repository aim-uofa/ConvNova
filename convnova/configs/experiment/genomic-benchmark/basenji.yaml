# @package _global_
defaults:
  - /pipeline: genomic_benchmark
  - override /scheduler: cosine_warmup_timm

model:
  _name_: basenji2
  params: # project root/src/models/basenji2/params_human.json
  seq_length: ${dataset.max_length}
  d_output: ${dataset.d_output}
  repeat_conv_tower: 3
  repeat_dilation: 7
  use_cropping: false
  d_model: 512

# decoder: null

task:
  # 2 options for soft_cross_entropy (for mixup)
  loss:
    # soft_cross_entropy for pytorch 1.10+, which takes in label_smoothing here
    _name_: cross_entropy
    # label_smoothing: 0.1
  # pass in list of k's
  # last_k_ppl: null

trainer:
  accelerator: gpu
  devices: 4
  num_nodes: 1
  accumulate_grad_batches: ${div_up:${train.global_batch_size}, ${eval:${trainer.devices} * ${dataset.batch_size} * ${trainer.num_nodes}}}
  max_epochs: 10
  precision: 16  # bf16 only a100
  gradient_clip_val: 1.0
  # strategy: null

# there are 8 datasets in this suite, choose 1 at a time, with their corresponding settings
# name                                num_seqs        num_classes     median len    std
# dummy_mouse_enhancers_ensembl       1210            2               2381          984.4  
# demo_coding_vs_intergenomic_seqs    100_000         2               200           0
# demo_human_or_worm                  100_000         2               200           0
# human_enhancers_cohn                27791           2               500           0
# human_enhancers_ensembl             154842          2               269           122.6
# human_ensembl_regulatory            289061          3               401           184.3
# human_nontata_promoters             36131           2               251           0
# human_ocr_ensembl                   174756          2               315           108.1

# decoder: null

dataset:
  # batch_size: 32  # Per GPU
  batch_size: 64
  max_length: 400 # select max that you want for this dataset
  # dataset_name: 'human_nontata_promoters'
  dataset_name: 'human_ocr_ensembl'
  dest_path: # project root/data/genomic_benchmark/'
  # d_output: 2  # binary classification by default
  use_padding: True
  padding_side: 'left'
  add_eos: False
  # train_len: 174756  # update this according to above table
  # __l_max: ${.max_length}
  tokenizer_name: char
  use_tokenizer: False
  # rc_aug: true  # reverse complement augmentation.  Didn't seem to help for human_nontata_promoters, but could be wrong

scheduler:
  t_in_epochs: False
  t_initial: ${eval:${div_up:${dataset.train_len}, ${train.global_batch_size}} * ${trainer.max_epochs}}
  warmup_lr_init: 1e-6
  warmup_t: ${eval:${div_up:${dataset.train_len}, ${train.global_batch_size}} * ${trainer.max_epochs} * 0.01}
  lr_min: ${eval:0.1 * ${optimizer.lr}}

optimizer:
  lr: 6e-4
  weight_decay: 0.1

train:
  gpu_mem: ${eval:"round(float(__import__('subprocess').check_output('nvidia-smi -i 0 --query-gpu=memory.total --format=csv,noheader,nounits', shell=True).strip().decode()) / 1000)"}
  seed: 43
  global_batch_size: ${eval:${trainer.devices}*${dataset.batch_size}}
  remove_test_loader_in_eval: true  # no test set in this benchmark
  pretrained_model_strict_load: False  # false allows encoder/decoder to be used if new model uses it
  # for loading backbone and not head, requires both of these flags below
  pretrained_model_state_hook:
    _name_: load_backbone
    freeze_backbone: false  # seems to work much better if false (ie finetune entire model)
